The design of the chat apps - whatsapps 

reqs -- 

- people join with unique hash link , (session manager)
- login with name , Login system
- message storage  (postgresql, message_id (unique hash), name, message, time ) 
- send and store message even if offline  
- fetch message when come online  
- notifications for message 
- send and read reciepts




-- The tech stack to be used 

| Layer        | Tech                                  |
| ------------ | ------------------------------------- |
| Frontend     | Next.js, WebSocket |
| Backend      | Go |
| WebSocket    | Gorilla |
| DB           | PostgreSQL (messages, users) |
| Caching      | Redis (presence + temp store) |
| Messaging    | WebSocket, fallback: polling  |
| Notification | WebSocket push, or Redis pub-sub |



Session manager -- 

- The session manager uses the same hash_id for connecting the backedn and the front-end api 
- The backend has the session manager , the connect the user based on the hash and the auth 
- The front-end opens the WebSocket client to connect with backend session id, sends/recieves message via sessionid 


Flow -- 

user go to registration -- 

- The name has to be different
- register to the page 
- gets the unique_id, that has to be stored in the redis
- make the register with using go 
- Redis asscess has to made in go ?? 



API calls --
demo/chat/register  -> front end 

backend -- 

    - /chat/register/user1
    - /chat/register/user2 

    - /chat/register/submit


After the registration -- 

- front-end 

    - /chat/user/<hash>login , give the login

    - after login

    -/chat/user/<hash>message


- backend 
    
    - /chat/user/<hash>/message_inp  , the input box
    - /chat/user/<hash>/message_send , send the message box 





